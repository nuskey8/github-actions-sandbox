name: Build Lua

on:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    - name: Install Build Tools
      run: sudo apt-get update && sudo apt-get install -y build-essential cmake

    - name: Build for ${{ matrix.arch }}
      run: |
        if [ "${{ matrix.arch }}" == "x86_64" ]; then
          make -C build-lua/src generic LUA_A=lua54_x86_64.so LUA_SO=
          cp build-lua/src/lua54_x86_64.so .
        else
          make -C build-lua/src generic LUA_A=lua54_arm64.so LUA_SO=
          cp build-lua/src/lua54_arm64.so .
        fi
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: lua_build_${{ matrix.arch }}_linux
        path: |
          lua54_x86_64.so
          lua54_arm64.so

  build-macos:
    runs-on: macos-14
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    - name: Install Build Tools
      run: brew install cmake

    - name: Set up architecture
      run: |
        if [ "${{ matrix.arch }}" == "arm64" ]; then
          sudo softwareupdate --install-rosetta --agree-to-license || true
        fi

    - name: Build for ${{ matrix.arch }}
      run: |
        if [ "${{ matrix.arch }}" == "x86_64" ]; then
          make -C build-lua/src generic LUA_A=lua54_x86_64.dylib LUA_SO=
          cp build-lua/src/lua54_x86_64.dylib .
        else
          make -C build-lua/src generic LUA_A=lua54_arm64.dylib LUA_SO=
          cp build-lua/src/lua54_arm64.dylib .
        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: lua_build_${{ matrix.arch }}_macos
        path: |
          lua54_x86_64.dylib
          lua54_arm64.dylib