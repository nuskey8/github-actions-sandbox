name: Build Luau

on:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          # macOS (x64/arm64)
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # Linux (x64/arm64)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          # Windows (x64/x86)
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: i686-pc-windows-gnu
          # Android (arm64/x86_64)
          - os: ubuntu-latest
            target: aarch64-linux-android
          - os: ubuntu-latest
            target: x86_64-linux-android
          # iOS (arm64/x86_64)
          - os: macos-latest
            target: aarch64-apple-ios
          - os: macos-latest
            target: x86_64-apple-ios
          # WebAssembly
          - os: ubuntu-latest
            target: wasm32-unknown-unknown

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up toolchains
        if: matrix.target == 'aarch64-linux-android' || matrix.target == 'x86_64-linux-android' || startsWith(matrix.target, 'aarch64-apple-ios') || startsWith(matrix.target, 'x86_64-apple-ios') || matrix.target == 'wasm32-unknown-unknown'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y gcc-multilib g++-multilib || true
          if [[ "${{ matrix.target }}" == *android* ]]; then
            rustup target add ${{ matrix.target }}
            sudo apt-get install -y libc6-dev-i386
          fi
          if [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
            rustup target add wasm32-unknown-unknown
          fi

      - name: Install libc++
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libc++-dev libc++abi-dev
          sudo apt-get install -y build-essential
      
      - name: Set up MinGW (x86)
        if: matrix.target == 'i686-pc-windows-gnu'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x86

      - name: Set up MinGW (x64)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
  
      - name: Set up Emscripten
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: mymindstorm/setup-emsdk@v14

      - name: Set up Android SDK & NDK
        id: setup-ndk
        if: matrix.target == 'aarch64-linux-android' || matrix.target == 'x86_64-linux-android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Set up Environment Variables for NDK
        if: matrix.target == 'aarch64-linux-android' || matrix.target == 'x86_64-linux-android'
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}"
          echo "PATH=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV
          echo "PATH=${{ steps.setup-ndk.outputs.ndk-path}}/toolchains/x86_64-4.9/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV # Older NDKs might use this
        shell: bash

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Install Ninja and Make
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y ninja-build make || brew install ninja || true
      
      - name: Build luau-ffi
        working-directory: native/luau-ffi
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android26-clang 
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android26-clang
          CC: ${{ (matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'x86_64-pc-windows-gnu') || '' }}
          CXX: ${{ (matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'x86_64-pc-windows-gnu') || '' }}
          CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_LINKER: emcc
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: luau-ffi-${{ matrix.target }}
          path: |
            native/luau-ffi/target/${{ matrix.target }}/release/libluau.*